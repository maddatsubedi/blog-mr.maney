---
import header from "@/config/header.json";

import Search from "@/components/search.astro";
import { RiMessage3Line } from "react-icons/ri";
import { TbMessageFilled } from "react-icons/tb";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

export interface HeaderLogo {
  name: string;
  url: string;
}

export interface RightButton {
  name: string;
  url: string;
  icon: string;
}

export interface Header {
  logo: HeaderLogo;
  nav_links: NavigationLink[];
  right_button: RightButton;
}

const { nav_links, logo, right_button } = header as Header;
const { pathname } = Astro.url;

const { transparentBackground } = Astro.props;
---

<header
  id="header"
  class={`header ${transparentBackground ? "transparent-background" : "header-background"}`}
>
  <!-- <nav class="navbar container m-0 px-5 md:pl-[110px] md:pr-[40px] md2:px-5 gap-5"> -->
  <nav class="navbar" id="navbar">
    <!-- logo -->
    <div class="left-logo transition-all duration-300 md:pl-[90px] order-0">
      <a class="text-2xl font-semibold" href={logo.url}>
        {logo.name}
      </a>
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="nav-toggle-label"
      for="nav-toggle"
      class="nav-toggle-label min-w-[27.5px] h-[22.5px] order-2 flex transition duration-[300ms] cursor-pointer justify-center items-center md2:order-1 md2:hidden"
    >
      <div
        class="menu-icon w-full h-full relative rotate-0 transition duration-[500ms] ease-in-out"
      >
        <span
          class="block absolute top-0 h-[3px] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[300ms] ease-in-out"
        ></span>
        <span
          class="block absolute top-[calc(50%-1.5px)] h-[3px] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[300ms] ease-in-out"
        ></span>
        <span
          class="block absolute top-[calc(50%-1.5px)] h-[3px] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[300ms] ease-in-out"
        ></span>
        <span
          class="block absolute h-[3px] top-[calc(100%-3px)] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[300ms] ease-in-out"
        ></span>
      </div>
    </label>

    <ul id="nav-menu" class="navbar-nav">
      {
        nav_links.map((menu) => (
          <li class="nav-item p-0">
            <a
              href={menu.url}
              class={`nav-link block text-[15px] text-white transition hover:text-slate-200 py-1 md2:py-0 px-2 md2:px-0 md2:inline-block ${
                (pathname === `${menu.url}/` || pathname === menu.url) &&
                "active"
              }`}
            >
              {menu.name}
            </a>
          </li>
        ))
      }
      <div class="flex py-1 items-center md2:hidden">
        <a
          class="w-fit flex gap-2 mx-auto rounded-full py-1 transition duration-200 px-4 h-[unset] text-[0.95rem] items-center bg-gray-500 text-white hover:bg-white hover:text-gray-800"
          href={right_button.url}
        >
          {right_button.name}
          <i class={right_button.icon}></i>
        </a>
      </div>
    </ul>
    <div
      class="order-1 md2:pr-[40px] lg:pr-[90px] ml-auto hidden items-center md:order-2 md:ml-0 md2:flex"
    >
      <a
        class="w-fit btn flex gap-2 py-2 px-6 text-[0.95rem] items-center btn-outline-white text-white hover:bg-white hover:text-black"
        href={right_button.url}
      >
        {right_button.name}
        <i class={right_button.icon}></i>
      </a>
    </div>
  </nav>
</header>

<script is:inline>
  //sticky header
  document.addEventListener("astro:page-load", () => {
    const header = document.getElementById("header");
    const navBar = document.getElementById("navbar");
    const navToggle = document.getElementById("nav-toggle");

    if (header) {
      let lastScrollY = window.scrollY;
      let currentScrollY = window.scrollY;
      let isAtTop = currentScrollY === 0;

      if (isAtTop) {
        header.classList.remove("scrolled-down");
      } else {
        header.classList.add("scrolled-down");
      }

      header.addEventListener("click", (e) => {
        const navToggleChecked = navToggle.checked;
        const clickedNavbar = e.target.closest("#navbar");
        if (navToggleChecked && navBar && !clickedNavbar) {
          navToggle.checked = false;
        }
      });

      window.addEventListener("scroll", () => {
        currentScrollY = window.scrollY;
        isAtTop = currentScrollY === 0;
        const isScrollingDown = currentScrollY > lastScrollY;

        if (isAtTop) {
          header.classList.remove("scrolled-down");
        } else {
          header.classList.add("scrolled-down");
        }

        if (navToggle) {
          const navToggled = navToggle.checked;
          if (navToggled) return;
        }

        if (isScrollingDown) {
          header.classList.add("scrolled");
        } else {
          header.classList.remove("scrolled");
        }

        lastScrollY = currentScrollY;
      });
    }
  });
</script>
