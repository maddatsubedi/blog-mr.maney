---
import header from "@/config/header.json";

import Search from "@/components/search.astro";
import { RiMessage3Line } from "react-icons/ri";
import { TbMessageFilled } from "react-icons/tb";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

export interface HeaderLogo {
  name: string;
  url: string;
}

export interface RightButton {
  name: string;
  url: string;
  icon: string;
}

export interface Header {
  logo: HeaderLogo;
  nav_links: NavigationLink[];
  right_button: RightButton;
}

const { nav_links, logo, right_button } = header as Header;
const { pathname } = Astro.url;

const { transparentBackground } = Astro.props;
---

<header
  id="header"
  class={`header ${transparentBackground ? "bg-transparent" : "bg-red-600"}`}
>
  <!-- <nav class="navbar container m-0 px-5 md:pl-[110px] md:pr-[40px] md2:px-5 gap-5"> -->
  <nav class="navbar container m-0 px-5 gap-5">
    <!-- logo -->
    <div class="left-logo transition-all duration-300 md:pl-[90px] order-0">
      <a class="text-2xl font-semibold" href={logo.url}>
        {logo.name}
      </a>
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="menu-icon-wrapper"
      for="nav-toggle"
      class="menu-icon-wrapper min-w-[27.5px] h-[22.5px] order-2 flex transition duration-[250ms] cursor-pointer justify-center items-center md2:order-1 md2:hidden"
    >
      <div
        class="menu-icon w-full h-full relative rotate-0 transition duration-[500ms] ease-in-out"
      >
        <span
          class="block absolute top-0 h-[3px] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[250ms] ease-in-out"
        ></span>
        <span
          class="block absolute top-[calc(50%-1.5px)] h-[3px] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[250ms] ease-in-out"
        ></span>
        <span
          class="block absolute top-[calc(50%-1.5px)] h-[3px] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[250ms] ease-in-out"
        ></span>
        <span
          class="block absolute h-[3px] top-[calc(100%-3px)] bg-white w-full rounded-full left-0 rotate-0 transition-all duration-[250ms] ease-in-out"
        ></span>
      </div>
    </label>

    <ul
      id="nav-menu"
      class="navbar-nav gap-2 rounded-xl md2:border-none border-[2px] border-[#364153] md2:rounded-none md2:gap-8 order-3 hidden w-full md2:order-1 md2:flex p-5 md2:p-0 md2:w-auto bg-[#1e2939] md2:bg-transparent"
    >
      {
        nav_links.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative cursor-pointer  dropdown-button">
                <span
                  class={`nav-link inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul
                  id="dropdown"
                  class="nav-dropdown-list mx-auto hidden duration-300 md2:invisible md2:absolute md2:block md2:h-auto md2:w-[13.5rem] md2:opacity-0 md2:group-hover:visible md2:group-hover:opacity-100"
                >
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-primary"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item py-1 md2:py-0">
                <a
                  href={menu.url}
                  class={`nav-link p-0 ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
      <div class="flex py-1 items-center md2:hidden">
        <a
          class="w-fit flex gap-2 mx-auto rounded-full py-1 transition duration-200 px-4 h-[unset] text-[0.95rem] items-center bg-gray-500 text-white hover:bg-white hover:text-gray-800"
          href={right_button.url}
        >
          {right_button.name}
          <i class={right_button.icon}></i>
        </a>
      </div>
    </ul>
    <div
      class="order-1 md2:pr-[40px] lg:pr-[90px] ml-auto hidden items-center md:order-2 md:ml-0 md2:flex"
    >
      <a
        class="w-fit btn flex gap-2 py-2 px-6 text-[0.95rem] items-center btn-outline-white text-white hover:bg-white hover:text-black"
        href={right_button.url}
      >
        {right_button.name}
        <i class={right_button.icon}></i>
      </a>
    </div>
  </nav>
</header>

<script is:inline>
  //sticky header
  document.addEventListener("astro:page-load", () => {
    const header = document.getElementById("header");
    const navToggle = document.getElementById("nav-toggle");

    if (header) {
      let lastScrollY = window.scrollY;
      let currentScrollY = window.scrollY;
      let isAtTop = currentScrollY === 0;

      if (isAtTop) {
        header.classList.remove("scrolled-down");
      } else {
        header.classList.add("scrolled-down");
      }

      window.addEventListener("scroll", () => {
        currentScrollY = window.scrollY;
        isAtTop = currentScrollY === 0;
        const isScrollingDown = currentScrollY > lastScrollY;

        if (isAtTop) {
          header.classList.remove("scrolled-down");
        } else {
          header.classList.add("scrolled-down");
        }

        if (navToggle) {
          const navToggled = navToggle.checked;
          if (navToggled) return;
        }

        if (isScrollingDown) {
          header.classList.add("scrolled");
        } else {
          header.classList.remove("scrolled");
        }

        lastScrollY = currentScrollY;
      });
    }
  });
</script>
