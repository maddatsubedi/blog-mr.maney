---
import Logo from "@/components/Logo.astro";
import header from "@/config/header.json";

import Search from "@/components/search.astro";
import { RiMessage3Line } from "react-icons/ri";
import { TbMessageFilled } from "react-icons/tb";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

export interface HeaderLogo {
  name: string;
  url: string;
}

export interface RightButton {
  name: string;
  url: string;
  icon: string;
}

export interface Header {
  logo: HeaderLogo;
  nav_links: NavigationLink[];
  right_button: RightButton;
}

const { nav_links, logo, right_button } = header as Header;
const { pathname } = Astro.url;

const { isHomePage } = Astro.props;
---

<header
  class={`header text-white flex justify-center w-full ${isHomePage ? "bg-transparent" : "bg-red-600"}`}
>
  <nav class="navbar container m-0 px-5 gap-5">
    <!-- logo -->
    <div class="md:pl-[90px] pr-5 pl-0 order-0">
      <a class="text-2xl font-semibold" href={logo.url}>
        {logo.name}
      </a>
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2 md:bg-transparent bg-red-400/70 p-3 backdrop-blur-md"
    >
      {
        nav_links.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative cursor-pointer  dropdown-button">
                <span
                  class={`nav-link inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul
                  id="dropdown"
                  class="nav-dropdown-list mx-auto hidden duration-300 lg:invisible lg:absolute lg:block lg:h-auto lg:w-[13.5rem] lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100"
                >
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-primary"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link inline-block lg:block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
    <div class="order-1 ml-auto hidden items-center md:order-2 md:ml-0 lg:flex">
      <a
        class="w-fit btn flex gap-2 px-6 text-[0.95rem] items-center btn-outline-white text-white hover:bg-white hover:text-black"
        href={right_button.url}
      >
        {right_button.name}
        <!-- <TbMessageFilled size={20} /> -->
        <i class={right_button.icon}></i>
      </a>
    </div>
  </nav>
</header>

<!-- <script is:inline>
  //sticky header
  document.addEventListener("astro:page-load", () => {
    const header = document.querySelector(".header");
    window.addEventListener("scroll", () => {
      if (window.scrollY > 0) {
        header.classList.add("header-sticky");
      } else {
        header.classList.remove("header-sticky");
      }
    });
  });
</script> -->
